[{"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\index.js":"1","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\App.js":"2","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\header.component.jsx":"3","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\footer.component.jsx":"4","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\pages\\description.pages.jsx":"5","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\notFound.jsx":"6","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\pages\\searchpage.pages.jsx":"7","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\sidebar.jsx":"8","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\jobDescription.jsx":"9","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\jobList.jsx":"10","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\SearchBar.component.jsx":"11","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\loader.jsx":"12","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\job.jsx":"13","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\ui-kits\\Input.jsx":"14"},{"size":359,"mtime":1615535647060,"results":"15","hashOfConfig":"16"},{"size":4808,"mtime":1615739453776,"results":"17","hashOfConfig":"16"},{"size":163,"mtime":1615535647051,"results":"18","hashOfConfig":"16"},{"size":160,"mtime":1615535647051,"results":"19","hashOfConfig":"16"},{"size":546,"mtime":1615641898787,"results":"20","hashOfConfig":"16"},{"size":93,"mtime":1615535647052,"results":"21","hashOfConfig":"16"},{"size":547,"mtime":1615810867945,"results":"22","hashOfConfig":"16"},{"size":2713,"mtime":1615642084276,"results":"23","hashOfConfig":"16"},{"size":1153,"mtime":1615811772762,"results":"24","hashOfConfig":"16"},{"size":690,"mtime":1615811242855,"results":"25","hashOfConfig":"16"},{"size":754,"mtime":1615810808124,"results":"26","hashOfConfig":"16"},{"size":265,"mtime":1615646551674,"results":"27","hashOfConfig":"16"},{"size":846,"mtime":1615738810433,"results":"28","hashOfConfig":"16"},{"size":730,"mtime":1615810516004,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"18pd8pv",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\index.js",[],["60","61"],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\App.js",["62","63"],"import React, { Component } from \"react\";\r\nimport NavLogo from \"./components/header.component\";\r\nimport FooterLogo from \"./components/footer.component\";\r\nimport SearchPage from \"./pages/searchpage.pages\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport notFound from \"./components/notFound\";\r\nimport Description from \"./pages/description.pages\";\r\nimport axios from \"axios\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    jobs: [],\r\n    filteredJobs: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  async fetchData() {\r\n    const dataToSubmit = [];\r\n    try {\r\n      const promise1 = await axios.get(\r\n        \"https://limitless-harbor-63035.herokuapp.com/https://remoteok.io/api\"\r\n      );\r\n      const promise2 = await axios.get(\r\n        \"https://limitless-harbor-63035.herokuapp.com/https://jobs.github.com/positions.json?search=node\"\r\n      );\r\n      Promise.all([promise1, promise2]).then((values) => {\r\n        values.forEach((value) => {\r\n          dataToSubmit.push(value.data);\r\n        });\r\n\r\n        const result = [];\r\n        result.push(\r\n          dataToSubmit[0]\r\n            .map((el) => {\r\n              return {\r\n                name: el.company || \"Job Opportunity\",\r\n                position: el.position,\r\n                logo:\r\n                  el.company_logo ||\r\n                  \"https://www.logodesign.net/logo/abstract-cuboid-building-4519ld.png\",\r\n                date: el.date,\r\n                description:\r\n                  el.description || `This company hasn't provided description`,\r\n                location: el.location || \"Remote\",\r\n                url: el.apply_url,\r\n              };\r\n            })\r\n            .filter((el) => el.position)\r\n        );\r\n\r\n        result.push(\r\n          dataToSubmit[1]\r\n            .map((el) => {\r\n              return {\r\n                name: el.company || \"Job Opportunity\",\r\n                position: el.title,\r\n                logo:\r\n                  el.company_logo ||\r\n                  \"https://www.logodesign.net/logo/abstract-cuboid-building-4519ld.png\",\r\n                date: el.created_at,\r\n                description:\r\n                  el.description || `This company hasn't provided description`,\r\n                location: el.location || \"Remote\",\r\n                url: el.url,\r\n              };\r\n            })\r\n            .filter((el) => el.position)\r\n        );\r\n\r\n        const jobPosts = [...result[0], ...result[1]];\r\n\r\n        const noShowList = [\r\n          \"ios\",\r\n          \"android\",\r\n          \"devOps\",\r\n          \"Data\",\r\n          \"Recruiter\",\r\n          \"Marketer\",\r\n          \"C++\",\r\n          \"Mobile App\",\r\n          \"Mobile Developer\",\r\n          \"Content Writer\",\r\n        ].map((el) => el.toLowerCase());\r\n\r\n        let elementIsNotIncluded = true;\r\n\r\n        let allJobs = jobPosts.filter((cur) => {\r\n          elementIsNotIncluded = true;\r\n\r\n          cur.position\r\n            .toLowerCase()\r\n            .split(\" \")\r\n            .forEach((el) => {\r\n              if (noShowList.includes(el)) {\r\n                elementIsNotIncluded = false;\r\n              }\r\n            });\r\n\r\n          if (elementIsNotIncluded) return cur;\r\n        });\r\n\r\n        this.setState({\r\n          jobs: allJobs,\r\n          filteredJobs: allJobs,\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  handleFilter = (value) => {\r\n    let fullMatch = value.split(\" \").join(\"\").toLowerCase();\r\n    let partialMatch = value.trim().split(\" \");\r\n\r\n    const remaining = [];\r\n\r\n    const result = this.state.jobs.filter((job) => {\r\n      let pos = job.position.split(\" \").join(\"\").toLowerCase();\r\n\r\n      if (pos.includes(fullMatch)) {\r\n        return job;\r\n      } else {\r\n        remaining.push(job);\r\n      }\r\n    });\r\n\r\n    remaining.forEach((job) => {\r\n      let shouldSkip = false;\r\n      let pos = job.position.split(\" \").join(\"\").toLowerCase();\r\n\r\n      partialMatch.forEach((el) => {\r\n        if (shouldSkip) {\r\n          return;\r\n        }\r\n        if (pos.includes(el.toLowerCase())) {\r\n          result.push(job);\r\n          shouldSkip = true;\r\n          return;\r\n        }\r\n      });\r\n    });\r\n    this.setState({\r\n      filteredJobs: result,\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"px-24\">\r\n        <NavLogo />\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            component={() => (\r\n              <SearchPage\r\n                jobs={this.state.filteredJobs}\r\n                filterJob={this.handleFilter}\r\n              />\r\n            )}\r\n          />\r\n          <Route exact path=\"/description/:id\" component={Description} />\r\n          <Route component={notFound} />\r\n        </Switch>\r\n        <FooterLogo />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\header.component.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\footer.component.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\pages\\description.pages.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\notFound.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\pages\\searchpage.pages.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\sidebar.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\jobDescription.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\jobList.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\SearchBar.component.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\loader.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\components\\job.jsx",[],"C:\\Users\\Dante\\Desktop\\Microverse\\github_jobs\\src\\ui-kits\\Input.jsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":90,"column":45,"nodeType":"70","messageId":"71","endLine":90,"endColumn":47},{"ruleId":"68","severity":1,"message":"69","line":121,"column":49,"nodeType":"70","messageId":"71","endLine":121,"endColumn":51},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]